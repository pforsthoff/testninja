pipeline {
    environment {
        REGISTRY_REPO = 'pforsthoff/pforsthoff'
        REGISTRY_CREDENTIAL = 'dockerhub'
        REGISTRY = 'https://hub.docker.com'
        REGISTRY_NAME = 'hub.docker.com'
        REGISTRY_IMAGE = 'pforsthoff/testninja'
        IMAGE = 'TestNinja'
        REMOTE_DOCKER_HOST = 'tcp://192.168.1.199:2375'
      }
    agent any
    stages {
        //stage('Checkout Code from Github Repo') {
        //    steps {
        //            git( 
        //                url: 'https://github.com/pforsthoff/testninja.git/', 
        //                branch: 'master'
        //                )
        //    }
        //}
        //stage('Build (dotnet build)') {
        //    steps {
        //        sh 'echo "Building dotnet app"'
        //        sh 'dotnet build'
        //    }
        //}
        //stage('Test: Run Nunit Unit Tests'){
        //    steps {
        //    sh "dotnet test Tests/TestNinja.UnitTests/TestNinja.UnitTests.csproj " +
        //    "/p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
        //    }
        //}
		stage('SonarQube Code Analysis and Coverage') {
		    steps {
		        sh 'dotnet sonarscanner begin /k:"TestNinja2" /d:sonar.host.url="http://192.168.1.215" ' +
		        '/d:sonar.login="6b8e1356fda8e59d6fce77730be13c7d3f6245e3" /d:sonar.verbose=true ' +
		        '/d:sonar.cs.opencover.reportsPaths=Tests/TestNinja.UnitTests/Tests/TestNinja.UnitTests/coverage.opencover.xml ' +
		        '/d:sonar.coverage.exclusions="**Tests*.cs,**wwwroot*,**controllers*"'
		        sh 'dotnet build'
		        sh 'dotnet test Tests/TestNinja.UnitTests/TestNinja.UnitTests.csproj ' +
		            '/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="Tests/TestNinja.UnitTests/coverage.opencover.xml"'
		        sh 'dotnet sonarscanner end /d:sonar.login="6b8e1356fda8e59d6fce77730be13c7d3f6245e3"'
		    }
		}
        //stage('Build Docker image') {
        //    steps{
        //        script {
        //            dockerImage = docker.build('$REGISTRY_IMAGE:$BUILD_NUMBER')
        //        }
        //    }
        //}
		//stage('Deploy To DockerHub') {
		//agent any
		//    steps{
		//    script {
		//        docker.withRegistry( '', REGISTRY_CREDENTIAL ) {
		//        dockerImage.push("$BUILD_NUMBER")
		//        dockerImage.push("latest")
		//        }
		//    }
		//    }
		//}
		//        stage('Deploy to Tanzu') {
		//          steps{
		//            withCredentials([[$class            :   'UsernamePasswordMultiBinding',
		//                              credentialsId     :   'PCF_LOGIN',
		//                              usernameVariable  :   'USERNAME',
		//                              passwordVariable  :   'PASSWORD']]) {
		//                              sh 'cf login -a http://api.run.pivotal.io -u $USERNAME -p $PASSWORD'
		//                              sh 'cf push'
		//            }
		//         }
		//        }

		//stage('Remove Unused docker image(s)') {
		//agent any
		//    steps{
		//        script{
		//            try{
		//            sh "docker system prune --force --all"
		//            }
		//            catch (e){}
		//        }
		//    }
		//}
		//        stage ('Save unit test results') {
		//           steps {
		//                sh "dotnet test --logger \"trx;LogFileName=unit_tests.trx\""
		//            }
		//        }
		//stage('Stop Previous Deployment from 192.168.1.199'){
		//agent any
		//    steps{
		//        script{
		//            try{
		//                    docker.withServer("$REMOTE_DOCKER_HOST"){
		//                        docker.withRegistry("$REGISTRY_REPO"){
		//                        sh "docker stop $IMAGE"
		//                        }
		//                    }
		//                }
		//                catch (e){}
		//        }
		//    }
		//}
		//stage('Deploy to Test (192.168.1.199)'){
		//agent any
		//    steps{
		//        script{
		//            docker.withServer("$REMOTE_DOCKER_HOST"){
		//                docker.withRegistry("$REGISTRY_REPO"){
		//                    docker.image('$REGISTRY_IMAGE:latest').run('-p 5000:5000 -i -t --name $IMAGE --rm $REGISTRY_IMAGE:latest')
		//                }
		//            }
		//        }
		//    }
		//}

		// Deploy to K8s using Kubernetes Plugin for Jenkins
		//stage('Deploy to K8s (192.168.1.199)'){
		//agent {label 'kubepod'}
		//    steps{
		//        script{
		//           kubernetesDeploy(configs: "nginx.yaml", kubeconfigId: "mykubeconfig")
		//        }
		//    }
		//}
    // Deploy to K8s using kubectl directly
        stage('Deploy to K8s (192.168.1.199)'){
            steps{
                script{
                   sh 'kubectl apply -f deployment.yaml'
                }
            }
        }
    }
}
