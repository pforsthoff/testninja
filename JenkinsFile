pipeline {
environment {
    registry = "pforsthoff/pforsthoff"
    registryCredential = 'dockerhub'
  }
    agent any
    stages {
        
        stage('Build') {
            steps {
                sh 'echo "Building dotnet app"'
                sh '''
                    dotnet build
                '''
            }
        }
//        stage('SonarQube Code Analysis') {
//            steps {
//                sh 'dotnet sonarscanner begin /k:"letmein" /d:sonar.host.url="http://192.168.1.215" /d:sonar.login="514a7ddcd04c721f93d424e0f77ff0752d0629bf"'
//                sh 'dotnet sonarscanner end /d:sonar.login="514a7ddcd04c721f93d424e0f77ff0752d0629bf"'
//            }
//        }
//        stage('Test: Unit Test'){
//            steps {
//            sh "dotnet test Tests/TestNinja.UnitTests/TestNinja.UnitTests.csproj --no-build --collect "Code Coverage""
//     }
//  }
//        stage('Building image') {
//          steps{
//            script {
//              dockerImage = docker.build registry + ":$BUILD_NUMBER"
//            }
//          }
//        }
//        stage('Deploy Image') {
//          steps{
//            script {
//              docker.withRegistry( '', registryCredential ) {
//                dockerImage.push()
//              }
//            }
//         }
//        }
//        stage('Deploy to Tanzu') {
//          steps{
//            withCredentials([[$class            :   'UsernamePasswordMultiBinding',
//                              credentialsId     :   'PCF_LOGIN',
//                              usernameVariable  :   'USERNAME',
//                              passwordVariable  :   'PASSWORD']]) {
//                              sh 'cf login -a http://api.run.pivotal.io -u $USERNAME -p $PASSWORD'
//                              sh 'cf push'
//            }
//         }
//        }
//        stage('Remove Unused docker image') {
//          steps{
//            sh "docker rmi $registry:$BUILD_NUMBER"
//          }
//        }
stage ('Run unit tests') {
    steps {
        powershell "dotnet test -c:Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --no-build --no-restore --logger \"trx;LogFileName=unit_tests.xml\""
    }
    post {
        always {
            step([$class: 'MSTestPublisher', testResultsFile:"**/unit_tests.xml", failOnError: true, keepLongStdio: true])
            script {
                if (currentBuild.result == 'FAILURE') {
                    error("Test coverage is too low.")
                }
            }
        }
    }
}
    }
}
