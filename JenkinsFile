pipeline {
environment {
    registry = "pforsthoff/pforsthoff"
    registryCredential = 'dockerhub'
  }
    agent any
    stages {
        stage('Checkout') {
            steps {
                 git( 
                     credentialsId: '65bf30a5-bbe7-4cd3-aa2a-fb69509a4f19', 
                     url: 'https://github.com/pforsthoff/testninja.git/', 
                     branch: 'master'
                     )
                 }
  }

        stage('Build') {
            steps {
                sh 'echo "Building dotnet app"'
                sh '''
                    dotnet build
                '''
            }
        }
        stage('SonarQube Code Analysis') {
            steps {
                sh 'dotnet sonarscanner begin /k:"letmein" /d:sonar.host.url="http://192.168.1.215" /d:sonar.login="e5a371653e755fe90ab5ac03f2ad11ea01c50033"'
                sh 'dotnet build'
                sh 'dotnet sonarscanner end /d:sonar.login="e5a371653e755fe90ab5ac03f2ad11ea01c50033"'
            }
        }
//        stage('Test: Unit Test'){
//            steps {
//            sh "dotnet test Tests/TestNinja.UnitTests/TestNinja.UnitTests.csproj --no-build --collect "Code Coverage""
//     }
//  }
//        stage('Building image') {
//          steps{
//            script {
//              dockerImage = docker.build registry + ":$BUILD_NUMBER"
//            }
//          }
//        }
//        stage('Deploy Image') {
//          steps{
//            script {
//              docker.withRegistry( '', registryCredential ) {
//                dockerImage.push()
//              }
//            }
//         }
//        }
//        stage('Deploy to Tanzu') {
//          steps{
//            withCredentials([[$class            :   'UsernamePasswordMultiBinding',
//                              credentialsId     :   'PCF_LOGIN',
//                              usernameVariable  :   'USERNAME',
//                              passwordVariable  :   'PASSWORD']]) {
//                              sh 'cf login -a http://api.run.pivotal.io -u $USERNAME -p $PASSWORD'
//                              sh 'cf push'
//            }
//         }
//        }
//        stage('Remove Unused docker image') {
//          steps{
//            sh "docker rmi $registry:$BUILD_NUMBER"
//          }
//        }
        stage ('Save unit test results') {
            steps {
                sh "dotnet test --logger \"trx;LogFileName=unit_tests.trx\""
            }
        }
   }
}
